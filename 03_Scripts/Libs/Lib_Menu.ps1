# ============================================================
# Library: Lib_Menu.ps1
# Version: LIB_V1.0.3
# Zweck:   Einheitliche Men√ºf√ºhrung mit R√ºckkehrfunktion
# Autor:   Herbert Schrotter
# Datum:   19.10.2025
# ============================================================

function Show-SubMenu {
    <#
        .SYNOPSIS
            Zeigt ein Untermen√º mit beliebigen Optionen an.

        .PARAMETER MenuTitle
            √úberschrift des Men√ºs (Zeilenumbruch mit `n m√∂glich).

        .PARAMETER Options
            Hashtable: "Taste" = "Beschriftung|Aktion"

        .PARAMETER ReturnAfterAction
            Wenn gesetzt: Nach Ausf√ºhren EINER Aktion zur√ºckkehren,
            damit der Aufrufer Daten neu berechnen und das Men√º neu
            zeichnen kann (z. B. Statuszeile aktualisieren).

        .OUTPUTS
            Gibt die getroffene Auswahl zur√ºck (z. B. "1") oder "0"/"z" bei Zur√ºck.
    #>

    param(
        [Parameter(Mandatory)][string]$MenuTitle,
        [Parameter(Mandatory)][hashtable]$Options,
        [switch]$ReturnAfterAction
    )

    # Systeminfo laden (wie gehabt)
    try {
        . "$PSScriptRoot\Lib_Systeminfo.ps1"
        $debugMode = Get-DebugMode
    } catch { $debugMode = $false }

    while ($true) {
        Clear-Host
        try { $debugMode = Get-DebugMode } catch { $debugMode = $false }

        Write-Host "============================================="
        Write-Host ("        " + ($MenuTitle -replace '^\s+', ''))
        Write-Host "============================================="
        if ($debugMode) { Write-Host "ü™≤ DEBUG-MODE AKTIVIERT`n" -ForegroundColor DarkYellow }

        foreach ($key in $Options.Keys) {
            Write-Host "$key - $($Options[$key].Split('|')[0])"
        }
        Write-Host "`n0 - Zur√ºck zum vorherigen Men√º"

        $choice = Read-Host "`nBitte Auswahl eingeben"
        if ($choice -eq "0" -or $choice -eq "z") { return "0" }

        if ($Options.ContainsKey($choice)) {
            $action = $Options[$choice].Split('|')[1]
            if ($debugMode) { Write-Host "‚Üí Ausf√ºhrung: $action" -ForegroundColor DarkGray }
            try { Invoke-Expression $action }
            catch {
                Write-Host "‚ùå Fehler beim Ausf√ºhren von '$action': $($_.Exception.Message)" -ForegroundColor Red
            }
            Pause
            if ($ReturnAfterAction) { return $choice }  # ‚¨ÖÔ∏è WICHTIG: nach Aktion zur√ºckkehren
        }
        else {
            Write-Host "‚ö†Ô∏è Ung√ºltige Eingabe. Bitte erneut versuchen." -ForegroundColor Red
            Start-Sleep 1
        }
    }
}
